@namespace alexandria.web.Components.Pages
@using System.Text.Json
@using System.Text.Json.Serialization
@using alexandria.api.Models
@using Microsoft.AspNetCore.SignalR.Client
@implements IAsyncDisposable
@inject IConfiguration Configuration
@inject HttpClient httpClient
@rendermode InteractiveServer

<MudIconButton Icon="@Icons.Material.Filled.Book" Color="@GetColor()" OnClick="(() => GetDeviceStatus())" />

@code {
    private string baseURL => Configuration?["baseURL"] ?? string.Empty;

    private DetectedDevice.StateEnum deviceState = DetectedDevice.StateEnum.NOT_DETECTED;

    private async Task GetDeviceStatus()
    {
        var options = new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true,
                Converters = { new JsonStringEnumConverter() }
            };

        var detectedDevice = await httpClient.GetFromJsonAsync<DetectedDevice>($"{Configuration["baseURL"]}/knowndevices/detect", options);
        deviceState = detectedDevice != null ? detectedDevice.State : DetectedDevice.StateEnum.NOT_DETECTED;
        StateHasChanged();
    }

    private Color GetColor()
    {
        if (deviceState == DetectedDevice.StateEnum.MATCHED)
        {
            return Color.Success;
        }
        else if (deviceState == DetectedDevice.StateEnum.NOT_MATCHED)
        {
            return Color.Warning;
        }
        else
        {
            return Color.Dark;
        }
    }

    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl($"{Configuration["baseURL"]}/hubs/devices")
        //.ConfigureLogging(logging =>
        //{
        // logging.AddFilter("Microsoft.AspNetCore.SignalR", LogLevel.Debug);
        // logging.AddConsole();
        //})
        .AddJsonProtocol(options =>
        {
            options.PayloadSerializerOptions.Converters.Add(new JsonStringEnumConverter());
            options.PayloadSerializerOptions.DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull;
        })
        .Build();

        hubConnection.On<DetectedDevice>("USBDeviceEvent", (detectedDevice) =>
        {
            deviceState = detectedDevice.State;
            InvokeAsync(StateHasChanged);
        });

        try
        {
            await hubConnection.StartAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }

        await GetDeviceStatus();
    }

    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
