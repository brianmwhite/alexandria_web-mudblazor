@namespace alexandria.web.Components.Pages
@using System.Text.Json
@using System.Text.Json.Serialization
@using alexandria.api.Models
@using Microsoft.AspNetCore.SignalR.Client
@implements IAsyncDisposable
@inject IConfiguration Configuration
@inject HttpClient httpClient
@rendermode InteractiveServer

<MudIconButton Icon=@GetDeviceStatusIcon() Color="@GetDeviceStatusColor()" OnClick="(() => Eject())" />
<MudIconButton Icon="@Icons.Material.Filled.Smartphone" Color="@GetMatchStatusColor()" OnClick="(() => GetDeviceStatus())" />

@code {
    private string baseURL => Configuration?["baseURL"] ?? string.Empty;

    private DetectedDevice _detectedDevice = new DetectedDevice();

    private async Task GetDeviceStatus()
    {
        var options = new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true,
                Converters = { new JsonStringEnumConverter() }
            };

        var response = await httpClient.GetFromJsonAsync<DetectedDevice>($"{Configuration["baseURL"]}/knowndevices/detect", options);
        if (response != null)
        {
            _detectedDevice = response;
        }
        StateHasChanged();
    }

    private async Task Eject()
    {
        if (_detectedDevice.DeviceState == DetectedDevice.DeviceStateEnum.MOUNTED)
        {
            await httpClient.PostAsync($"{Configuration["baseURL"]}/usb/unmount", null);
            await GetDeviceStatus();
        }
    }

    @* private string GetClass()
{
if (deviceState == DetectedDevice.DeviceStateEnum.NO_DEVICE_DETECTED)
{
return "d-none";
}
else
{
return "";
}
} *@
    private Color GetDeviceStatusColor()
    {
        if (_detectedDevice.DeviceState == DetectedDevice.DeviceStateEnum.MOUNTED)
        {
            //show eject icon
            return Color.Inherit;
        }
        else if (_detectedDevice.DeviceState == DetectedDevice.DeviceStateEnum.NOT_MOUNTED)
        {
            //show mount icon
            return Color.Inherit;
        }
        else
        {
            //show nothing detected icon
            return Color.Dark;
        }
    }

    private string GetDeviceStatusIcon()
    {
        if (_detectedDevice.DeviceState == DetectedDevice.DeviceStateEnum.MOUNTED)
        {
            //show eject icon
            return Icons.Material.Filled.Eject;
        }
        else if (_detectedDevice.DeviceState == DetectedDevice.DeviceStateEnum.NOT_MOUNTED)
        {
            //show mount icon
            //return Icons.Material.Filled.ReplayCircleFilled;
            return Icons.Material.Filled.DoNotDisturb;
        }
        else
        {
            //show nothing detected icon
            return Icons.Material.Filled.DoNotDisturb;
        }
    }

    private Color GetMatchStatusColor()
    {
        if (_detectedDevice.MatchedState == DetectedDevice.MatchedStateEnum.MATCHED_KNOWN && _detectedDevice.DeviceState == DetectedDevice.DeviceStateEnum.MOUNTED)
        {
            return Color.Success;
        }
        else if (_detectedDevice.MatchedState == DetectedDevice.MatchedStateEnum.MATCHED_TYPE && _detectedDevice.DeviceState == DetectedDevice.DeviceStateEnum.MOUNTED)
        {
            return Color.Warning;
        }
        else
        {
            return Color.Inherit;
        }
    }

    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()
    {
        _detectedDevice.DeviceState = DetectedDevice.DeviceStateEnum.NO_DEVICE_DETECTED;
        _detectedDevice.MatchedState = DetectedDevice.MatchedStateEnum.NOT_MATCHED;

        hubConnection = new HubConnectionBuilder()
        .WithUrl($"{Configuration["baseURL"]}/hubs/devices")
        //.ConfigureLogging(logging =>
        //{
        // logging.AddFilter("Microsoft.AspNetCore.SignalR", LogLevel.Debug);
        // logging.AddConsole();
        //})
        .AddJsonProtocol(options =>
        {
            options.PayloadSerializerOptions.Converters.Add(new JsonStringEnumConverter());
            options.PayloadSerializerOptions.DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull;
        })
        .Build();

        hubConnection.On<DetectedDevice>("USBDeviceEvent", (detectedDevice) =>
        {
            _detectedDevice = detectedDevice;
            InvokeAsync(StateHasChanged);
        });

        try
        {
            await hubConnection.StartAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }

        await GetDeviceStatus();
    }

    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
