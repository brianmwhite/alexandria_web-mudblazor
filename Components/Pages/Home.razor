@page "/"

<PageTitle>Books</PageTitle>

@using System.Net.Http.Json
@using System.Text.Json
@using System.Text
@using alexandria.api.Models
@using alexandria.web.Models
@inject HttpClient httpClient
@inject IConfiguration Configuration
@rendermode InteractiveServer
@using MudBlazor
@inject ISnackbar Snackbar
@using web_mudblazor.Components.Layout


<style>
    div.container {
        --mud-elevation-1: none !important;
        /* remove shadow line */
    }
</style>
@using alexandria.web.Components.Pages
<div class="container" style="height:calc(100vh - 200px); display:grid; grid-template-rows: minmax(0,1fr);">
    <MudTable
        ServerData="@(new Func<TableState, Task<TableData<Book>>>(ServerReload))"
        Dense="true"
        Hover="true"
        @ref="table"
        Height="100%"
        FixedHeader="true"
        FixedFooter="true"
        MultiSelection="true"
        @bind-SelectedItems="@selectedBooks">
        <ToolBarContent>
            <MudButton 
                Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Send" Color="Color.Primary" Size="Size.Small" 
                OnClick="SendToDevice" Disabled="IsSendButtonDisabled()">
                @if (_processing)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                    <MudText Class="ms-2">Sending</MudText>
                }
                else
                {
                    <MudText>Send to Device</MudText>
                }
            </MudButton>
            <MudSpacer />
            <MudTextField T="string" Value="@searchString" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start" Clearable="true" OnClearButtonClick="@( () => ClearSearch() )" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Title</MudTh>
            <MudTh>Authors</MudTh>
            <MudTh>Series</MudTh>
            <MudTh Style="text-align:center">Publication Date</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Title">@context.Title</MudTd>
            <MudTd DataLabel="Authors">@context.Authors</MudTd>
            <MudTd DataLabel="Series" Class="cursor-pointer" @onclick="@( () => OnSeriesClick(context.SeriesId) )">
                @context.SeriesInfo</MudTd>
            <MudTd DataLabel="PublicationDate" Style="text-align:center">
                @(context.PublicationDate.HasValue ? context.PublicationDate.Value.ToString("MMM yyyy") : "")
            </MudTd>
        </RowTemplate>
        <NoRecordsContent>
            <MudText>No matching records found</MudText>
        </NoRecordsContent>
        <LoadingContent>
            <MudText>Loading...</MudText>
        </LoadingContent>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[] { 20, 10, 5 }" />
        </PagerContent>
    </MudTable>
</div>
@code {
    private MudTable<Book>? table;
    private bool _processing = false;
    private int totalItems;
    private string searchString = "";
    private long? seriesId = 0;
    private string baseURL => Configuration?["baseURL"] ?? string.Empty;
    private HashSet<Book> selectedBooks = new HashSet<Book>();

    [CascadingParameter]
    public MainLayout? Layout { get; set; }

    private bool IsSendButtonDisabled()
    {
        DetectedDevice? detectedDevice = Layout?.TopAppBarDetectedDevice;
        return _processing == true
            || detectedDevice?.DeviceState != DetectedDevice.DeviceStateEnum.MOUNTED 
            || detectedDevice?.MatchedState != DetectedDevice.MatchedStateEnum.MATCHED_KNOWN
            || selectedBooks.Count == 0;
            ;
    }

    private async void SendToDevice()
    {
        _processing = true;
        var bookIds = selectedBooks.Select(b => b.Id).ToList();
        DetectedDevice? detectedDevice = Layout?.TopAppBarDetectedDevice;

        var payload = new
        {
            BookIds = bookIds,
            KnownDeviceId = detectedDevice?.KnownDevice?.Id
        };
        HttpResponseMessage response;
        try 
        {
            response = await httpClient.PostAsJsonAsync($"{baseURL}/books/transfer", payload);
            await Task.Delay(250);
        } 
        finally 
        {
            _processing = false;
            StateHasChanged();
        }

        if (response.IsSuccessStatusCode)
        {
            Snackbar.Add($"Books: {string.Join(",", bookIds)} || Device: {detectedDevice?.KnownDevice?.Id} ", Severity.Success);
        }
        else
        {
            Snackbar.Add($"Failed to transfer books. Status code: {response.StatusCode}", Severity.Error);
        }
    }

    private void SetPageSize(TableState state, int pageSize)
    {
        table?.SetRowsPerPage(pageSize);
        state.PageSize = pageSize;
    }
    private async Task<TableData<Book>> ServerReload(TableState state)
    {
        if (searchString.StartsWith("series="))
        {
            seriesId = long.Parse(searchString.Substring(7));
        }
        var query = $"{baseURL}/books?page={state.Page + 1}&limit={state.PageSize}";
        if (seriesId > 0)
        {
            @* SetPageSize(state, 20); *@
            query = $"{baseURL}/books/series/{seriesId}?page={state.Page + 1}&limit={state.PageSize}";
        }
        else if (!string.IsNullOrEmpty(searchString))
        {
            query = $"{baseURL}/books?search={searchString}&page={state.Page + 1}&limit={state.PageSize}";
        }
        PagedResult<Book>? data = await httpClient.GetFromJsonAsync<PagedResult<Book>>(query);
        totalItems = data?.TotalCount ?? 0;

        return new TableData<Book>
            {
                Items = data?.Data ?? Enumerable.Empty<Book>(),
                TotalItems = totalItems
            };
    }

    private void OnSearch(string text)
    {
        searchString = text;
        seriesId = 0; // Reset seriesId when a new search is performed
        table?.ReloadServerData();
    }

    private void OnSeriesClick(long? id)
    {
        seriesId = id; // Set seriesId when a series is clicked
        searchString = $"series={id}"; // Reset searchString when a series is clicked
        table?.ReloadServerData();
    }

    private void ClearSearch()
    {
        searchString = "";
        seriesId = 0;
        table?.ReloadServerData();
    }
}