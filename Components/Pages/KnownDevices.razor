@page "/knowndevices"
@rendermode InteractiveServer
@using System.Text.Json
@using System.Text.Json.Serialization
@using alexandria.web.Models
@using alexandria.api.Models
@inject HttpClient httpClient
@inject MudBlazor.ISnackbar snackBar
@inject IConfiguration Configuration
@using System.Net.Http.Json
@inject NavigationManager NavigationManager
@using alexandria.web.Components.Pages

<div class="container" style="height:calc(100vh - 200px); display:grid; grid-template-rows: minmax(0,1fr);">
    <MudTable
        ServerData="@(new Func<TableState, Task<TableData<KnownDeviceModel>>>(ServerReload))"
        Dense="true"
        Hover="true" @ref="table"
        Height="100%"
        FixedHeader="true"
        FixedFooter="true">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Known Devices</MudText>
            <MudIconButton Color="Color.Primary" Icon="@Icons.Material.Filled.AddCircle" Title="Add" OnClick="@( () => NavigationManager.NavigateTo("/knowndevices/0") )">Add</MudIconButton>
            <MudIconButton Color="Color.Primary" Icon="@Icons.Material.Filled.Settings" Title="Device Types" OnClick="@( () => NavigationManager.NavigateTo("/devicetypes/") )">Device Types</MudIconButton>
            <MudSpacer />
            <MudTextField T="string" Value="@searchString" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start" Clearable="true" OnClearButtonClick="@( () => ClearSearch() )" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Device Name</MudTh>
            <MudTh>Ebook Dir</MudTh>
            <MudTh>Save Path Template</MudTh>
            <MudTh>Vendor</MudTh>
            <MudTh>Serial Number</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="DeviceName">@context.DeviceName</MudTd>
            <MudTd DataLabel="EbookDir">@context.EbookDirectory</MudTd>
            <MudTd DataLabel="SavePathTemplate">@context.SavePathTemplate</MudTd>
            <MudTd DataLabel="Vendor">@context.Vendor</MudTd>
            <MudTd DataLabel="SerialNumber">@context.SerialNumber</MudTd>
            <MudTd>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@( () => EditAction(context.Id) )">Edit</MudButton>
            </MudTd>
        </RowTemplate>
        <NoRecordsContent>
            <MudText>No matching records found</MudText>
        </NoRecordsContent>
        <LoadingContent>
            <MudText>Loading...</MudText>
        </LoadingContent>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[] { 20, 10, 5 }" />
        </PagerContent>
    </MudTable>
</div>

@code {
    private MudTable<KnownDeviceModel>? table;
    private int totalItems;
    private string baseURL => Configuration?["baseURL"] ?? string.Empty;
    private string searchString = "";

    private DetectedDevice _detectedDevice = new DetectedDevice();

    private async Task GetDeviceStatus()
    {
        var options = new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true,
                Converters = { new JsonStringEnumConverter() }
            };

        var response = await httpClient.GetFromJsonAsync<DetectedDevice>($"{Configuration["baseURL"]}/knowndevices/detect", options);
        if (response != null)
        {
            _detectedDevice = response;
        }
        StateHasChanged();
    }

    private void SetPageSize(TableState state, int pageSize)
    {
        table?.SetRowsPerPage(pageSize);
        state.PageSize = pageSize;
    }
    private async Task<TableData<KnownDeviceModel>> ServerReload(TableState state)
    {
        var url = $"{baseURL}/knowndevices";
        PagedResult<KnownDeviceModel>? data = await httpClient.GetFromJsonAsync<PagedResult<KnownDeviceModel>>(url);
        totalItems = data?.TotalCount ?? 0;

        return new TableData<KnownDeviceModel>
            {
                Items = data?.Data ?? Enumerable.Empty<KnownDeviceModel>(),
                TotalItems = totalItems
            };
    }
    private void OnSearch(string text)
    {
        searchString = text;
        table?.ReloadServerData();
    }
    private void ClearSearch()
    {
        searchString = "";
        table?.ReloadServerData();
    }
    private void EditAction(long? id)
    {
        if (id.HasValue)
        {
            NavigationManager.NavigateTo($"/knowndevices/{id.Value}");
        }
    }
}